using UnityEngine;using UnityEngine.UI;using System.Collections;public class HumanPlayerSelect : MonoBehaviour {    [SerializeField]    private HumanPlayer _player;    [SerializeField]    private Text _okText;    private Text[] _texts;    private Button[] _buttons;    private RectTransform _rectTransform;    private int _selectedNumber;    private int _targetIndex;    [SerializeField]    private RectTransform _visiblePos;    [SerializeField]    private RectTransform _unvisiblePos;    [SerializeField]    private RectTransform _shower;	void Start () {        _texts = GetComponentsInChildren<Text>();        _buttons = GetComponentsInChildren<Button>();        _rectTransform = GetComponent<RectTransform>();        _rectTransform.position = _unvisiblePos.position;        _shower.gameObject.SetActive(false);	}		void Update () {		}    public void SelectNumber(int number){        _selectedNumber = number;        _okText.text = _selectedNumber.ToString() + " OK?";        //0-11じゃないのが入ってきた時については考えていない    }    public void DecideAttack(){        //FIXME: 複数回押されても無視するように作り直すs        _player.forecastNumber = _selectedNumber;        _player.targetIndex = _targetIndex;        _player.finishInput = true;    }    public void SelectTarget(Card.Color color, Color white, Color black, int cardIndex){        _shower.gameObject.SetActive(false);        Color cardColor = (color == Card.Color.White)? white : black;        Color inverse = (cardColor == white)? black : white;        foreach(var button in _buttons){            ColorBlock block = button.colors;            block.normalColor = cardColor;            block.highlightedColor = cardColor;            block.disabledColor = cardColor;            block.pressedColor = cardColor;            button.colors = block;        }        foreach(var text in _texts){            text.color = inverse;        }        _targetIndex = cardIndex;        _rectTransform.position = _visiblePos.position;    }    public void ShowNumber(int number, Color color, Color inverse, RectTransform pos){        _shower.gameObject.SetActive(true);        _shower.position = pos.position + pos.up * pos.sizeDelta.y / 3f;        Image img = _shower.gameObject.GetComponent<Image>();        img.color = color;        Text txt = _shower.gameObject.GetComponentInChildren<Text>();        txt.text = number.ToString();        txt.color = inverse;    }    public void CanselSelect(){        _shower.gameObject.SetActive(false);        _rectTransform.position = _unvisiblePos.position;    }    //TODO: パネルい動きをつける    /*    IEnumerator MoveTo(RectTransform destination){        float timer = 0f;        Vector3 startPos = _rectTransform.position;        while(timer <= 0.5f){            timer += Time.deltaTime;            //FIXME: tのところをもう少しいい感じの関数にしたい            _rectTransform.position = Vector3.Lerp(startPos, destination.position, timer / 0.5f);            yield return new WaitForEndOfFrame();        }    }*/}