using UnityEngine;using UnityEngine.UI;using System.Collections;using System.Text.RegularExpressions;//動きはanimationに任せればいいんじゃ?public class CardObject : MonoBehaviour {    private RectTransform _rectTransform;    private Text _text;    private Button _button;    private Animator _animator;    public HumanPlayerSelect ui;    public int index;    private Card _card;    public Card card{        get{ return _card; }        set{             _card = value;            if(!_text)                _text = GetComponentInChildren<Text>();            _text.text = _card.number.ToString();        }    }    public Color white = Color.white;    public Color black = Color.black;    public float moveTime = 0.5f;    private bool _isInitialized = false;    void Start () {        //if(_isInitialized) return;        _rectTransform = GetComponent<RectTransform>();        _animator = GetComponent<Animator>();        if(!_text)            _text = GetComponentInChildren<Text>();        _text.text = card.number.ToString();        _button = GetComponent<Button>();        ColorBlock cblk = _button.colors;        if(card.color == Card.Color.Black){            cblk.normalColor = black;            cblk.highlightedColor = black;            cblk.disabledColor = black;            cblk.pressedColor = black;            _button.colors = cblk;            _text.color = white;        } else {            cblk.normalColor = white;            cblk.highlightedColor = white;            cblk.disabledColor = white;            cblk.pressedColor = white;            _button.colors = cblk;                        _text.color = black;        }        _isInitialized = true;	}		void Update () {        float angle = Vector3.Angle(Camera.main.transform.forward, _rectTransform.forward);        _text.enabled = angle >= 90f;	}    public IEnumerator MoveTo(Vector3 to){        float timer = 0f;        Vector3 startPos = _rectTransform.position;        while(timer <= moveTime){            timer += Time.deltaTime;            _rectTransform.position = Vector3.Lerp(startPos, to, Mathf.Pow(timer/moveTime, 1f/3f));            yield return new WaitForEndOfFrame();        }    }    public IEnumerator Draw(GameFlowManager.TurnStatus turn, RectTransform deckPos, RectTransform drawPos){        //カードの初期化を待つ        while(!_isInitialized) yield return null;        _animator.SetBool("IsPlayerTurn", turn == GameFlowManager.TurnStatus.PlayerTurn);        _animator.SetTrigger("Draw");        if(turn == GameFlowManager.TurnStatus.AITurn){            _button.onClick.AddListener(() => ui.SelectTarget(card.color, white, black, index));        } else {            Color color = (card.color == Card.Color.White)? white : black;            Color inverse = (color == white)? black : white;            _button.onClick.AddListener(() => ui.ShowNumber(card.number, color, inverse, _rectTransform));        }        float timer = 0f;        //現在再生中の、名前に"Draw"を含むAnimationを取得        AnimationClip currentClip = null;        foreach(var clipInfo in _animator.GetCurrentAnimatorClipInfo(0)){            Match m = Regex.Match(clipInfo.clip.name, "Draw");            currentClip = (m.Success)? clipInfo.clip : currentClip;        }        //Animationの長さを取得、Animationがなければ1秒とする。        float length = 1f;        if(currentClip){            length = currentClip.length;        }        while(timer <= length) {            timer += Time.deltaTime;            _rectTransform.position = Vector3.Lerp(deckPos.position, drawPos.position, timer/length);            yield return new WaitForEndOfFrame();        }    }    public IEnumerator IntoHand(RectTransform drawPos, RectTransform handPos, bool isOpen){        _animator.SetTrigger("EndTurn");        float timer = 0f;        AnimationClip currentClip = null;        foreach(var clipInfo in _animator.GetCurrentAnimatorClipInfo(0)){            Match m = Regex.Match(clipInfo.clip.name, "Hand");            currentClip = (m.Success)? clipInfo.clip : currentClip;        }        float length = 1f;        if(currentClip){            length = currentClip.length;        }        while(timer <= length){            timer += Time.deltaTime;            _rectTransform.position = Vector3.Lerp(drawPos.position, handPos.position, timer/length);            yield return new WaitForEndOfFrame();        }        if(isOpen){            OpenCard();            //登録したメソッドをどこかに保管しておく方法がわからないのでとりあえず全消去            _button.onClick.RemoveAllListeners();        }    }    public void OpenCard(){        if(card.isOpen)            _animator.SetTrigger("FaceUp");        card.isOpen = true;    }}